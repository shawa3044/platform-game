package game.window;
//Alayna Shaw
//April 23, 2018
//Final Project 
//This is the Game class it contains the main method and starts the game
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import game.framework.KeyInput;
import game.framework.ObjectId;
import game.objects.Player;

public class Game extends Canvas implements Runnable{

	private static final long serialVersionUID = 1L;
	
	private boolean running = false;
	private Thread thread;
	
	public static int width, height;
	
	Handler handler;
	//this method create the objects
	private void init() {
		width = getWidth();
		height = getHeight();
		handler = new Handler();
		handler.addObject(new Player(100,100,ObjectId.player, handler));
		handler.createLevel();
		this.addKeyListener(new KeyInput(handler));
	}
	//this class keeps track of the game starting
	public synchronized void start() {
		//makes sure thread isn't created again
		if(running)
			return;
		running = true;
		thread = new Thread(this);
		thread.start();
	}
	//This method runs the game
	@Override
	public void run() {
		init();
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountofTicks = 60.0;
		double ns = 1000000000 / amountofTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int updates = 0;
		int frames = 0;
		while(running) {
			long now = System.nanoTime();
			delta += (now -lastTime) / ns;
			lastTime = now;
			while(delta >= 1) {
				tick();
				updates++;
				delta--;
			}
			render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
			//ps = frames;
			//ticks = updates;
				frames = 0;
				updates = 0;
				
			}
		}
		
	}
	private void tick() {
		handler.tick();
	}
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		/////////////////////////////////
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, getWidth(),getHeight());
		
		handler.render(g);
		////////////////////////////////
		g.dispose();
		bs.show();
	}
	//this is the main method, it creates the window
	public static void main(String[]args) {
		new Window(800, 600, "Final Game",new Game());
	}
}
**********************************************************************************************
package game.window;
// This class handles all the object
import java.awt.Graphics;
import java.util.LinkedList;

import game.framework.GameObject;
import game.framework.ObjectId;
import game.objects.Blocks;

public class Handler {

	public LinkedList<GameObject> object = new LinkedList<GameObject>();
	
	private GameObject tempObject;
	
	public void tick() {
		for(int i = 0; i < object.size(); i++) {
			tempObject = object.get(i);
			
			tempObject.tick(object);
		}
	}
	public void render(Graphics g) {
		for(int i = 0; i < object.size(); i++) {
			tempObject = object.get(i);
			
			tempObject.render(g);
		}
	}
	public void addObject(GameObject object) {
		this.object.add(object);
	}
	public void removeObject(GameObject object) {
		this.object.remove(object);
	}
	public void createLevel() {
		for(int xx = 0; xx < 12*(Game.WIDTH + 768); xx += 32) {
			addObject(new Blocks(xx, Game.HEIGHT+565, ObjectId.Block));
		}
	}
}
*********************************************************************************************
package game.window;
//This is the Window class it creates the game's window
import java.awt.Dimension;
import javax.swing.JFrame;

public class Window {
	
	public Window(int w, int h, String title, Game game){
		game.setPreferredSize(new Dimension(w,h));
		game.setMaximumSize(new Dimension(w,h));
		game.setMinimumSize(new Dimension(w,h));
		//these lines create and set the JFrame
		JFrame frame = new JFrame(title);
		frame.add(game);
		frame.pack();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		
		game.start();
	}
}
**********************************************************************************************
package game.objects;
// This class creates the player
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.LinkedList;

import game.framework.GameObject;
import game.framework.ObjectId;
import game.window.Handler;

public class Player extends GameObject{

	private float width = 32, height = 64;
	private float gravity = 0.5f;
	private final float maxSpeed = 10;
	private Handler handler;
	/** Constructor <br>
	 * 
	 * @param x
	 * @param y
	 * @param id
	 */
	public Player(float x, float y, ObjectId id, Handler handler) {
		super(x, y, id);
		this.handler = handler;
	}

	@Override
	public void tick(LinkedList<GameObject> object) {
		x += velX;
		y += velY;
		if(falling || jumping) {
			velY += gravity;
			if(velY > maxSpeed) {
				velY = maxSpeed;
			}
		}
		Collision(object);
	}
	
	private void Collision(LinkedList<GameObject> object) {
		for(int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);
			if(tempObject.getId() == ObjectId.Block) {
				if(getBounds().intersects(getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					jumping = false;
					falling = false;
				}
				else {
					falling = true;
				}
			}
		}
	}
	
	@Override
	public void render(Graphics g) {
		g.setColor(Color.BLUE);
		g.fillRect((int)x, (int)y, (int)width, (int)height);	
		
		Graphics2D g2d = (Graphics2D) g;
		g2d.draw(getBounds());
		g2d.draw(getBoundsLeft());
		g2d.draw(getBoundsRight());
		g2d.draw(getBoundsTop());
	}

	@Override
	public Rectangle getBounds() {
		return new Rectangle((int) ((int)x + (width/2) - ((width/2)/2)), (int) ((int)y + (height/2)), (int)width/2, (int)height/2);
	}
	public Rectangle getBoundsTop() {
		return new Rectangle((int) ((int)x + (width/2) - ((width/2)/2)), (int)y, (int)width/2, (int)height/2);
	}

	public Rectangle getBoundsRight() {
		return new Rectangle((int) ((int)x + width - 5), (int)y + 5, (int)5, (int)height-10);
	}
	public Rectangle getBoundsLeft() {
		return new Rectangle((int)x, (int)y + 5, (int)5, (int)height-10);
	}
	

}
**********************************************************************************************
package game.objects;
//This class creates the blocks
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.LinkedList;
import game.framework.GameObject;
import game.framework.ObjectId;

public class Blocks extends GameObject{
	/** Constructor <br>
	 * 
	 * @param x
	 * @param y
	 * @param id
	 */
	public Blocks(float x, float y, ObjectId id) {
		super(x, y, id);
	}

	@Override
	public void tick(LinkedList<GameObject> object) {
		
	}

	@Override
	public void render(Graphics g) {
		g.setColor(Color.WHITE);
		g.drawRect((int)x, (int)y, 32, 32);
		
	}

	@Override
	public Rectangle getBounds() {
		return new Rectangle((int)x, (int)y, 32, 32);
	}

}
**********************************************************************************************
package game.framework;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import game.window.Handler;

public class KeyInput extends KeyAdapter{
	Handler handler;
	public KeyInput(Handler handler) {
		this.handler = handler;
	}
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		for(int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);
			if(tempObject.getId() == ObjectId.player) {
				if(key == KeyEvent.VK_D) tempObject.setVelX(5);
				if(key == KeyEvent.VK_A) tempObject.setVelX(-5);
				if(key == KeyEvent.VK_SPACE) tempObject.setVelY(-10);
			}
		}
		if(key == KeyEvent.VK_ESCAPE) {
			System.exit(1);
		}
	}
	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		for(int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);
			if(tempObject.getId() == ObjectId.player) {
				if(key == KeyEvent.VK_D) tempObject.setVelX(0);
				if(key == KeyEvent.VK_A) tempObject.setVelX(0);
			}
		}
	}
}
**********************************************************************************************
package game.framework;
// The Game Object class is an abstract class
// This class is the base for all the objects
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.LinkedList;

public abstract class GameObject {

	protected float x, y;
	protected ObjectId id;
	protected float velX = 0, velY=0;
	protected boolean falling = true;
	protected boolean jumping = false;
	/** Constructor <br>
	 * 
	 * @param x
	 * @param y
	 * @param id
	 */
	public GameObject(float x, float y, ObjectId id) {
		this.x = x;
		this.y = y;
		this.id = id;
	}
	/** Abstract <br>
	 * 
	 * @param object
	 */
	public abstract void tick(LinkedList<GameObject> object);
	/** Abstract <br>
	 * 
	 * @param g
	 */
	public abstract void render(Graphics g);
	/** Abstract <br>
	 * 
	 * @return returns bound
	 */
	public abstract Rectangle getBounds();
	/** Getter <br>
	 * 
	 * @return x
	 */
	public float getX() {
		return x;
	}
	/** Getter <br>
	 * 
	 * @return y
	 */
	public float getY() {
		return y;
	}
	/** Setter <br>
	 * 
	 * @param x
	 */
	public void setX(float x) {
		this.x = x;
	}
	/** Setter <br>
	 * 
	 * @param y
	 */
	public void setY(float y) {
		this.y = y;
	}
	/** Getter <br>
	 * 
	 * @return velX
	 */
	public float getVelX() {
		return velX;
	}
	/** Getter <br>
	 * 
	 * @return velY
	 */
	public float getVelY() {
		return velY;
	}
	/** Setter <br>
	 * 
	 * @param velX
	 */
	public void setVelX(float velX) {
		this.velX = velX;
	}
	/** Setter <br>
	 * 
	 * @param velY
	 */
	public void setVelY(float velY) {
		this.velY = velY;
	}
	/** Getter <br>
	 * 
	 * @return falling
	 */
	public boolean isFalling() {
		return falling;
	}
	/** Setter <br>
	 * 
	 * @param falling
	 */
	public void setFalling(boolean falling) {
		this.falling = falling;
	}
	/** Getter <br>
	 * 
	 * @return jumping
	 */
	public boolean isJumping() {
		return jumping;
	}
	/** Setter <br>
	 * 
	 * @param jumping
	 */
	public void setJumping(boolean jumping) {
		this.jumping = jumping;
	}
	/** Getter <br>
	 * 
	 * @return id
	 */
	public ObjectId getId() {
		return id;
	}
}
**********************************************************************************************
package game.framework;
//This enum stores all the object id's
public enum ObjectId {

	player(), Block(), coins(), mob();

}
